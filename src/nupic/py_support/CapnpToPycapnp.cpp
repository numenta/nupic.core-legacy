/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__create_example
#define __PYX_HAVE_API__create_example
#include "capnp/helpers/checkCompiler.h"
#include "stdint.h"
//#include "capnp/helpers/capabilityHelper.h"
//#include "capnp/helpers/rpcHelper.h"
//#include "capnp/helpers/asyncHelper.h"
#include "capnp/dynamic.h"
#include "capnp/schema.h"
#include "capnp/any.h"
//#include "capnp/blob.h"
#include "capnp/message.h"
#include "capnp/schema.capnp.h"
#include "capnp/common.h"
#include "kj/common.h"
#include "kj/array.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
//#include "capnp/serialize.h"
//#include "capnp/serialize-packed.h"
#include "kj/string.h"
#include "kj/exception.h"
#include "kj/memory.h"
//#include "kj/async.h"
#include "kj/string-tree.h"
//#include "kj/time.h"
//#include "kj/async-io.h"
//#include "capnp/capability.h"
//#include "capnp/rpc-twoparty.h"
#include "capnp/schema-parser.h"
#include "capnp/orphan.h"
#include "capnp/helpers/fixMaybe.h"
#include "capnp/helpers/serialize.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
//static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
//static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
//static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
//#if PY_MAJOR_VERSION < 3
//    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
//    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
//#else
//    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
//    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
//#endif
//#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
//#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
//#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
//#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
//#if PY_MAJOR_VERSION < 3
//static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
//{
//    const Py_UNICODE *u_end = u;
//    while (*u_end++) ;
//    return (size_t)(u_end - u - 1);
//}
//#else
//#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
//#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
//static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
//static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
//static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
//static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "create_example.pyx",
  "capnp.pxd",
};

/* "capnp/includes/types.pxd":3
 * from cpython.ref cimport PyObject, Py_INCREF, Py_DECREF
 * from libc.stdint cimport *
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8
 */
typedef unsigned int __pyx_t_5capnp_8includes_5types_uint;

/* "capnp/includes/types.pxd":4
 * from libc.stdint cimport *
 * ctypedef unsigned int uint
 * ctypedef uint8_t byte             # <<<<<<<<<<<<<<
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16
 */
typedef uint8_t __pyx_t_5capnp_8includes_5types_byte;

/* "capnp/includes/types.pxd":5
 * ctypedef unsigned int uint
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8             # <<<<<<<<<<<<<<
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32
 */
typedef uint8_t __pyx_t_5capnp_8includes_5types_UInt8;

/* "capnp/includes/types.pxd":6
 * ctypedef uint8_t byte
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16             # <<<<<<<<<<<<<<
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64
 */
typedef uint16_t __pyx_t_5capnp_8includes_5types_UInt16;

/* "capnp/includes/types.pxd":7
 * ctypedef uint8_t UInt8
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32             # <<<<<<<<<<<<<<
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8
 */
typedef uint32_t __pyx_t_5capnp_8includes_5types_UInt32;

/* "capnp/includes/types.pxd":8
 * ctypedef uint16_t UInt16
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64             # <<<<<<<<<<<<<<
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16
 */
typedef uint64_t __pyx_t_5capnp_8includes_5types_UInt64;

/* "capnp/includes/types.pxd":9
 * ctypedef uint32_t UInt32
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8             # <<<<<<<<<<<<<<
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32
 */
typedef int8_t __pyx_t_5capnp_8includes_5types_Int8;

/* "capnp/includes/types.pxd":10
 * ctypedef uint64_t UInt64
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16             # <<<<<<<<<<<<<<
 * ctypedef int32_t Int32
 * ctypedef int64_t Int64
 */
typedef int16_t __pyx_t_5capnp_8includes_5types_Int16;

/* "capnp/includes/types.pxd":11
 * ctypedef int8_t Int8
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32             # <<<<<<<<<<<<<<
 * ctypedef int64_t Int64
 * 
 */
typedef int32_t __pyx_t_5capnp_8includes_5types_Int32;

/* "capnp/includes/types.pxd":12
 * ctypedef int16_t Int16
 * ctypedef int32_t Int32
 * ctypedef int64_t Int64             # <<<<<<<<<<<<<<
 * 
 * ctypedef char * Object
 */
typedef int64_t __pyx_t_5capnp_8includes_5types_Int64;

/* "capnp/includes/types.pxd":15
 * 
 * ctypedef char * Object
 * ctypedef bint Bool             # <<<<<<<<<<<<<<
 * ctypedef float Float32
 * ctypedef double Float64
 */
typedef int __pyx_t_5capnp_8includes_5types_Bool;

/* "capnp/includes/types.pxd":16
 * ctypedef char * Object
 * ctypedef bint Bool
 * ctypedef float Float32             # <<<<<<<<<<<<<<
 * ctypedef double Float64
 * from libcpp cimport bool as cbool
 */
typedef float __pyx_t_5capnp_8includes_5types_Float32;

/* "capnp/includes/types.pxd":17
 * ctypedef bint Bool
 * ctypedef float Float32
 * ctypedef double Float64             # <<<<<<<<<<<<<<
 * from libcpp cimport bool as cbool
 */
typedef double __pyx_t_5capnp_8includes_5types_Float64;

/*--- Type declarations ---*/
struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField;
struct __pyx_obj_5capnp_3lib_5capnp__Schema;
struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum;
struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder;

/* "capnp/includes/types.pxd":14
 * ctypedef int64_t Int64
 * 
 * ctypedef char * Object             # <<<<<<<<<<<<<<
 * ctypedef bint Bool
 * ctypedef float Float32
 */
typedef char *__pyx_t_5capnp_8includes_5types_Object;

/* "capnp/includes/capnp_cpp.pxd":68
 *         Promise[T] attach(Own[PyRefCounter] &, Own[PyRefCounter] &, Own[PyRefCounter] &, Own[PyRefCounter] &)
 * 
 * ctypedef Promise[PyObject *] PyPromise             # <<<<<<<<<<<<<<
 * ctypedef Promise[void] VoidPromise
 * 
 */
typedef  ::kj::Promise<PyObject *>  __pyx_t_5capnp_8includes_9capnp_cpp_PyPromise;

/* "capnp/includes/capnp_cpp.pxd":69
 * 
 * ctypedef Promise[PyObject *] PyPromise
 * ctypedef Promise[void] VoidPromise             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "kj/string-tree.h" namespace " ::kj":
 */
typedef  ::kj::Promise<void>  __pyx_t_5capnp_8includes_9capnp_cpp_VoidPromise;

/* "capnp/includes/capnp_cpp.pxd":100
 *     ctypedef Array[PyObject *] PyArray' ::kj::Array<PyObject *>'
 * 
 * ctypedef Promise[PyArray] PyPromiseArray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "kj/time.h" namespace " ::kj":
 */
typedef  ::kj::Promise< ::kj::Array<PyObject *>>  __pyx_t_5capnp_8includes_9capnp_cpp_PyPromiseArray;
struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field;
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy;

/* "capnp/lib/capnp.pxd":13
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 *     cdef _init(self, C_StructSchema.Field other, parent=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init {
  int __pyx_n;
  PyObject *parent;
};

/* "capnp/lib/capnp.pxd":33
 *     cdef object _schema
 * 
 *     cdef _init(self, C_DynamicStruct.Reader other, object parent, bint isRoot=?, bint tryRegistry=?)             # <<<<<<<<<<<<<<
 * 
 *     cpdef _get(self, field)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init {
  int __pyx_n;
  int isRoot;
  int tryRegistry;
};

/* "capnp/lib/capnp.pxd":42
 *     cpdef _has_by_field(self, _StructSchemaField field)
 * 
 *     cpdef as_builder(self, num_first_segment_words=?)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder {
  int __pyx_n;
  PyObject *num_first_segment_words;
};

/* "capnp/lib/capnp.pxd":52
 *     cdef object _schema
 * 
 *     cdef _init(self, DynamicStruct_Builder other, object parent, bint isRoot=?, bint tryRegistry=?)             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_write(self)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init {
  int __pyx_n;
  int isRoot;
  int tryRegistry;
};

/* "capnp/lib/capnp.pxd":62
 *     cpdef _set(self, field, value)
 *     cpdef _has(self, field)
 *     cpdef init(self, field, size=?)             # <<<<<<<<<<<<<<
 *     cpdef _get_by_field(self, _StructSchemaField field)
 *     cpdef _set_by_field(self, _StructSchemaField field, value)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init {
  int __pyx_n;
  PyObject *size;
};

/* "capnp/lib/capnp.pxd":66
 *     cpdef _set_by_field(self, _StructSchemaField field, value)
 *     cpdef _has_by_field(self, _StructSchemaField field)
 *     cpdef _init_by_field(self, _StructSchemaField field, size=?)             # <<<<<<<<<<<<<<
 *     cpdef init_resizable_list(self, field)
 *     cpdef _DynamicEnumField _which(self)
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field {
  int __pyx_n;
  PyObject *size;
};

/* "capnp/lib/capnp.pxd":74
 * 
 *     cpdef as_reader(self)
 *     cpdef copy(self, num_first_segment_words=?)             # <<<<<<<<<<<<<<
 * 
 * cdef class _DynamicEnumField:
 */
struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy {
  int __pyx_n;
  PyObject *num_first_segment_words;
};

/* "capnp/lib/capnp.pxd":10
 * 
 * 
 * cdef class _StructSchemaField:             # <<<<<<<<<<<<<<
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField *__pyx_vtab;
   ::capnp::StructSchema::Field thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":16
 * 
 * 
 * cdef class _DynamicOrphan:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicOrphan thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan *__pyx_vtab;
   ::capnp::Orphan< ::capnp::DynamicValue> thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":26
 * 
 * 
 * cdef class _DynamicStructReader:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicStruct.Reader thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader *__pyx_vtab;
   ::capnp::DynamicStruct::Reader thisptr;
  PyObject *_parent;
  int is_root;
  PyObject *_obj_to_pin;
  PyObject *_schema;
};


/* "capnp/lib/capnp.pxd":45
 * 
 * 
 * cdef class _DynamicStructBuilder:             # <<<<<<<<<<<<<<
 *     cdef DynamicStruct_Builder thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_vtab;
   ::capnp::DynamicStruct::Builder thisptr;
  PyObject *_parent;
  int is_root;
  int _is_written;
  PyObject *_schema;
};


/* "capnp/lib/capnp.pxd":76
 *     cpdef copy(self, num_first_segment_words=?)
 * 
 * cdef class _DynamicEnumField:             # <<<<<<<<<<<<<<
 *     cdef object thisptr
 * 
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField *__pyx_vtab;
  PyObject *thisptr;
};


/* "capnp/lib/capnp.pxd":82
 *     cpdef _str(self)
 * 
 * cdef class _Schema:             # <<<<<<<<<<<<<<
 *     cdef C_Schema thisptr
 * 
 */
struct __pyx_obj_5capnp_3lib_5capnp__Schema {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema *__pyx_vtab;
   ::capnp::Schema thisptr;
};


/* "capnp/lib/capnp.pxd":94
 *     cpdef get_proto(self)
 * 
 * cdef class _InterfaceSchema:             # <<<<<<<<<<<<<<
 *     cdef C_InterfaceSchema thisptr
 *     cdef object __method_names, __method_names_inherited, __methods, __methods_inherited
 */
struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema *__pyx_vtab;
   ::capnp::InterfaceSchema thisptr;
  PyObject *__pyx___method_names;
  PyObject *__pyx___method_names_inherited;
  PyObject *__pyx___methods;
  PyObject *__pyx___methods_inherited;
};


/* "capnp/lib/capnp.pxd":100
 *     cpdef get_dependency(self, id)
 * 
 * cdef class _DynamicEnum:             # <<<<<<<<<<<<<<
 *     cdef capnp.DynamicEnum thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum *__pyx_vtab;
   ::capnp::DynamicEnum thisptr;
  PyObject *_parent;
};


/* "capnp/lib/capnp.pxd":107
 *     cpdef _as_str(self)
 * 
 * cdef class _DynamicListBuilder:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicList.Builder thisptr
 *     cdef public object _parent
 */
struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder {
  PyObject_HEAD
  struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_vtab;
   ::capnp::DynamicList::Builder thisptr;
  PyObject *_parent;
};



/* "capnp/lib/capnp.pxd":10
 * 
 * 
 * cdef class _StructSchemaField:             # <<<<<<<<<<<<<<
 *     cdef C_StructSchema.Field thisptr
 *     cdef object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *,  ::capnp::StructSchema::Field, struct __pyx_opt_args_5capnp_3lib_5capnp_18_StructSchemaField__init *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField *__pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField;


/* "capnp/lib/capnp.pxd":16
 * 
 * 
 * cdef class _DynamicOrphan:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicOrphan thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *,  ::capnp::Orphan< ::capnp::DynamicValue>, PyObject *);
   ::capnp::Orphan< ::capnp::DynamicValue> (*move)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *);
  PyObject *(*get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan;


/* "capnp/lib/capnp.pxd":26
 * 
 * 
 * cdef class _DynamicStructReader:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicStruct.Reader thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *,  ::capnp::DynamicStruct::Reader, PyObject *, struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader__init *__pyx_optional_args);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *(*_which)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch);
  PyObject *(*_which_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch);
  PyObject *(*_get_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_has_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*as_builder)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_20_DynamicStructReader_as_builder *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader;


/* "capnp/lib/capnp.pxd":45
 * 
 * 
 * cdef class _DynamicStructBuilder:             # <<<<<<<<<<<<<<
 *     cdef DynamicStruct_Builder thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *,  ::capnp::DynamicStruct::Builder, PyObject *, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init *__pyx_optional_args);
  PyObject *(*_check_write)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *);
  PyObject *(*to_bytes)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_to_bytes_packed_helper)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*to_bytes_packed)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_set)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_init *__pyx_optional_args);
  PyObject *(*_get_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_set_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*_has_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch);
  PyObject *(*_init_by_field)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder__init_by_field *__pyx_optional_args);
  PyObject *(*init_resizable_list)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *(*_which)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*_which_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*adopt)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
  PyObject *(*disown)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*as_reader)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch);
  PyObject *(*copy)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *, int __pyx_skip_dispatch, struct __pyx_opt_args_5capnp_3lib_5capnp_21_DynamicStructBuilder_copy *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder;


/* "capnp/lib/capnp.pxd":76
 *     cpdef copy(self, num_first_segment_words=?)
 * 
 * cdef class _DynamicEnumField:             # <<<<<<<<<<<<<<
 *     cdef object thisptr
 * 
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *, PyObject *);
  PyObject *(*_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField;


/* "capnp/lib/capnp.pxd":82
 *     cpdef _str(self)
 * 
 * cdef class _Schema:             # <<<<<<<<<<<<<<
 *     cdef C_Schema thisptr
 * 
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *,  ::capnp::Schema);
  PyObject *(*as_const_value)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_struct)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_interface)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*as_enum)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
  PyObject *(*get_dependency)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*get_proto)(struct __pyx_obj_5capnp_3lib_5capnp__Schema *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema *__pyx_vtabptr_5capnp_3lib_5capnp__Schema;


/* "capnp/lib/capnp.pxd":94
 *     cpdef get_proto(self)
 * 
 * cdef class _InterfaceSchema:             # <<<<<<<<<<<<<<
 *     cdef C_InterfaceSchema thisptr
 *     cdef object __method_names, __method_names_inherited, __methods, __methods_inherited
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema *,  ::capnp::InterfaceSchema);
  PyObject *(*get_dependency)(struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema *__pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema;


/* "capnp/lib/capnp.pxd":100
 *     cpdef get_dependency(self, id)
 * 
 * cdef class _DynamicEnum:             # <<<<<<<<<<<<<<
 *     cdef capnp.DynamicEnum thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum *,  ::capnp::DynamicEnum, PyObject *);
  PyObject *(*_as_str)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum;


/* "capnp/lib/capnp.pxd":107
 *     cpdef _as_str(self)
 * 
 * cdef class _DynamicListBuilder:             # <<<<<<<<<<<<<<
 *     cdef C_DynamicList.Builder thisptr
 *     cdef public object _parent
 */

struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder {
  PyObject *(*_init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *,  ::capnp::DynamicList::Builder, PyObject *);
  PyObject *(*_get)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, int64_t, int __pyx_skip_dispatch);
  PyObject *(*_set)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*adopt)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan *, int __pyx_skip_dispatch);
  PyObject *(*disown)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*init)(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder *__pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

static void* __Pyx_GetVtable(PyObject *dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

//static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

//static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'capnp.helpers.non_circular' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'capnp.includes.types' */

/* Module declarations from 'capnp.includes.schema_cpp' */

/* Module declarations from 'capnp.includes.capnp_cpp' */

/* Module declarations from 'capnp.includes' */

/* Module declarations from 'capnp.helpers' */

/* Module declarations from 'capnp.helpers.helpers' */

/* Module declarations from 'capnp.lib.capnp' */
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__Schema = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum = 0;
static PyTypeObject *__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder = 0;

/* Module declarations from 'create_example' */
__PYX_EXTERN_C DL_EXPORT(PyObject) *createReader( ::capnp::DynamicStruct::Reader, PyObject *); /*proto*/
__PYX_EXTERN_C DL_EXPORT(PyObject) *createBuilder( ::capnp::DynamicStruct::Builder, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "create_example"
int __pyx_module_is_main_create_example = 0;

/* Implementation of 'create_example' */
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_test;

/* "create_example.pyx":8
 * from capnp.lib.capnp cimport _DynamicStructReader, _DynamicStructBuilder
 * 
 * cdef public PyObject * createReader(DynamicStruct.Reader other, PyObject * _parent):             # <<<<<<<<<<<<<<
 *   parent = <object>_parent
 * 
 */

PyObject *createReader( ::capnp::DynamicStruct::Reader __pyx_v_other, PyObject *__pyx_v__parent) {
  PyObject *__pyx_v_parent = NULL;
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *__pyx_v_ret = NULL;
  PyObject *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createReader", 0);

  /* "create_example.pyx":9
 * 
 * cdef public PyObject * createReader(DynamicStruct.Reader other, PyObject * _parent):
 *   parent = <object>_parent             # <<<<<<<<<<<<<<
 * 
 *   ret = _DynamicStructReader()
 */
  __pyx_t_1 = ((PyObject *)__pyx_v__parent);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parent = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "create_example.pyx":11
 *   parent = <object>_parent
 * 
 *   ret = _DynamicStructReader()             # <<<<<<<<<<<<<<
 *   ret._init(other, parent)
 *   Py_INCREF(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "create_example.pyx":12
 * 
 *   ret = _DynamicStructReader()
 *   ret._init(other, parent)             # <<<<<<<<<<<<<<
 *   Py_INCREF(ret)
 *   return <PyObject *>ret
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader *)__pyx_v_ret->__pyx_vtab)->_init(__pyx_v_ret, __pyx_v_other, __pyx_v_parent, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "create_example.pyx":13
 *   ret = _DynamicStructReader()
 *   ret._init(other, parent)
 *   Py_INCREF(ret)             # <<<<<<<<<<<<<<
 *   return <PyObject *>ret
 * 
 */
  Py_INCREF(((PyObject *)__pyx_v_ret));

  /* "create_example.pyx":14
 *   ret._init(other, parent)
 *   Py_INCREF(ret)
 *   return <PyObject *>ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "create_example.pyx":8
 * from capnp.lib.capnp cimport _DynamicStructReader, _DynamicStructBuilder
 * 
 * cdef public PyObject * createReader(DynamicStruct.Reader other, PyObject * _parent):             # <<<<<<<<<<<<<<
 *   parent = <object>_parent
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("create_example.createReader", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "create_example.pyx":17
 * 
 * 
 * cdef public PyObject * createBuilder(DynamicStruct_Builder other, PyObject * _parent):             # <<<<<<<<<<<<<<
 *   parent = <object>_parent
 * 
 */

PyObject *createBuilder( ::capnp::DynamicStruct::Builder __pyx_v_other, PyObject *__pyx_v__parent) {
  PyObject *__pyx_v_parent = NULL;
  struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *__pyx_v_ret = NULL;
  PyObject *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createBuilder", 0);

  /* "create_example.pyx":18
 * 
 * cdef public PyObject * createBuilder(DynamicStruct_Builder other, PyObject * _parent):
 *   parent = <object>_parent             # <<<<<<<<<<<<<<
 * 
 *   ret = _DynamicStructBuilder()
 */
  __pyx_t_1 = ((PyObject *)__pyx_v__parent);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_parent = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "create_example.pyx":20
 *   parent = <object>_parent
 * 
 *   ret = _DynamicStructBuilder()             # <<<<<<<<<<<<<<
 *   ret._init(other, parent)
 *   Py_INCREF(ret)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "create_example.pyx":21
 * 
 *   ret = _DynamicStructBuilder()
 *   ret._init(other, parent)             # <<<<<<<<<<<<<<
 *   Py_INCREF(ret)
 *   return <PyObject *>ret
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder *)__pyx_v_ret->__pyx_vtab)->_init(__pyx_v_ret, __pyx_v_other, __pyx_v_parent, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "create_example.pyx":22
 *   ret = _DynamicStructBuilder()
 *   ret._init(other, parent)
 *   Py_INCREF(ret)             # <<<<<<<<<<<<<<
 *   return <PyObject *>ret
 */
  Py_INCREF(((PyObject *)__pyx_v_ret));

  /* "create_example.pyx":23
 *   ret._init(other, parent)
 *   Py_INCREF(ret)
 *   return <PyObject *>ret             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "create_example.pyx":17
 * 
 * 
 * cdef public PyObject * createBuilder(DynamicStruct_Builder other, PyObject * _parent):             # <<<<<<<<<<<<<<
 *   parent = <object>_parent
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("create_example.createBuilder", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_parent);
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "create_example",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcreate_example(void); /*proto*/
PyMODINIT_FUNC initcreate_example(void)
#else
PyMODINIT_FUNC PyInit_create_example(void); /*proto*/
PyMODINIT_FUNC PyInit_create_example(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_create_example(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("create_example", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_create_example) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "create_example")) {
      if (unlikely(PyDict_SetItemString(modules, "create_example", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_5capnp_3lib_5capnp__StructSchemaField = __Pyx_ImportType("capnp.lib.capnp", "_StructSchemaField", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__StructSchemaField), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__StructSchemaField*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__StructSchemaField->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__StructSchemaField)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan = __Pyx_ImportType("capnp.lib.capnp", "_DynamicOrphan", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicOrphan), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicOrphan*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicOrphan->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicOrphan)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader = __Pyx_ImportType("capnp.lib.capnp", "_DynamicStructReader", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructReader), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructReader*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructReader->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructReader)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder = __Pyx_ImportType("capnp.lib.capnp", "_DynamicStructBuilder", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicStructBuilder), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicStructBuilder*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicStructBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicStructBuilder)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField = __Pyx_ImportType("capnp.lib.capnp", "_DynamicEnumField", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnumField), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnumField*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicEnumField->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnumField)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__Schema = __Pyx_ImportType("capnp.lib.capnp", "_Schema", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__Schema), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__Schema)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__Schema = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__Schema*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__Schema->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__Schema)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema = __Pyx_ImportType("capnp.lib.capnp", "_InterfaceSchema", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__InterfaceSchema), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__InterfaceSchema*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__InterfaceSchema->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__InterfaceSchema)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicEnum = __Pyx_ImportType("capnp.lib.capnp", "_DynamicEnum", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicEnum), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicEnum*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicEnum->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicEnum)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder = __Pyx_ImportType("capnp.lib.capnp", "_DynamicListBuilder", sizeof(struct __pyx_obj_5capnp_3lib_5capnp__DynamicListBuilder), 1); if (unlikely(!__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder = (struct __pyx_vtabstruct_5capnp_3lib_5capnp__DynamicListBuilder*)__Pyx_GetVtable(__pyx_ptype_5capnp_3lib_5capnp__DynamicListBuilder->tp_dict); if (unlikely(!__pyx_vtabptr_5capnp_3lib_5capnp__DynamicListBuilder)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "create_example.pyx":1
 * # distutils: include_dirs = /usr/local/lib/python2.7/site-packages             # <<<<<<<<<<<<<<
 * 
 * from cpython.ref cimport PyObject, Py_INCREF, Py_DECREF
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init create_example", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init create_example");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

//static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
//    const long neg_one = (long) -1, const_zero = 0;
//    const int is_unsigned = neg_one > const_zero;
//    if (is_unsigned) {
//        if (sizeof(long) < sizeof(long)) {
//            return PyInt_FromLong((long) value);
//        } else if (sizeof(long) <= sizeof(unsigned long)) {
//            return PyLong_FromUnsignedLong((unsigned long) value);
//        } else if (sizeof(long) <= sizeof(unsigned long long)) {
//            return PyLong_FromUnsignedLongLong((unsigned long long) value);
//        }
//    } else {
//        if (sizeof(long) <= sizeof(long)) {
//            return PyInt_FromLong((long) value);
//        } else if (sizeof(long) <= sizeof(long long)) {
//            return PyLong_FromLongLong((long long) value);
//        }
//    }
//    {
//        int one = 1; int little = (int)*(unsigned char *)&one;
//        unsigned char *bytes = (unsigned char *)&value;
//        return _PyLong_FromByteArray(bytes, sizeof(long),
//                                     little, !is_unsigned);
//    }
//}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

//static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
//    const long neg_one = (long) -1, const_zero = 0;
//    const int is_unsigned = neg_one > const_zero;
//#if PY_MAJOR_VERSION < 3
//    if (likely(PyInt_Check(x))) {
//        if (sizeof(long) < sizeof(long)) {
//            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
//        } else {
//            long val = PyInt_AS_LONG(x);
//            if (is_unsigned && unlikely(val < 0)) {
//                goto raise_neg_overflow;
//            }
//            return (long) val;
//        }
//    } else
//#endif
//    if (likely(PyLong_Check(x))) {
//        if (is_unsigned) {
//#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
// #if CYTHON_USE_PYLONG_INTERNALS
//            switch (Py_SIZE(x)) {
//                case  0: return 0;
//                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
//            }
// #endif
//#endif
//            if (unlikely(Py_SIZE(x) < 0)) {
//                goto raise_neg_overflow;
//            }
//            if (sizeof(long) <= sizeof(unsigned long)) {
//                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
//            } else if (sizeof(long) <= sizeof(unsigned long long)) {
//                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
//            }
//        } else {
//#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
// #if CYTHON_USE_PYLONG_INTERNALS
//            switch (Py_SIZE(x)) {
//                case  0: return 0;
//                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
//                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
//            }
// #endif
//#endif
//            if (sizeof(long) <= sizeof(long)) {
//                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
//            } else if (sizeof(long) <= sizeof(long long)) {
//                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
//            }
//        }
//        {
//#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
//            PyErr_SetString(PyExc_RuntimeError,
//                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
//#else
//            long val;
//            PyObject *v = __Pyx_PyNumber_Int(x);
// #if PY_MAJOR_VERSION < 3
//            if (likely(v) && !PyLong_Check(v)) {
//                PyObject *tmp = v;
//                v = PyNumber_Long(tmp);
//                Py_DECREF(tmp);
//            }
// #endif
//            if (likely(v)) {
//                int one = 1; int is_little = (int)*(unsigned char *)&one;
//                unsigned char *bytes = (unsigned char *)&val;
//                int ret = _PyLong_AsByteArray((PyLongObject *)v,
//                                              bytes, sizeof(val),
//                                              is_little, !is_unsigned);
//                Py_DECREF(v);
//                if (likely(!ret))
//                    return val;
//            }
//#endif
//            return (long) -1;
//        }
//    } else {
//        long val;
//        PyObject *tmp = __Pyx_PyNumber_Int(x);
//        if (!tmp) return (long) -1;
//        val = __Pyx_PyInt_As_long(tmp);
//        Py_DECREF(tmp);
//        return val;
//    }
//raise_overflow:
//    PyErr_SetString(PyExc_OverflowError,
//        "value too large to convert to long");
//    return (long) -1;
//raise_neg_overflow:
//    PyErr_SetString(PyExc_OverflowError,
//        "can't convert negative value to long");
//    return (long) -1;
//}

//static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
//    const int neg_one = (int) -1, const_zero = 0;
//    const int is_unsigned = neg_one > const_zero;
//#if PY_MAJOR_VERSION < 3
//    if (likely(PyInt_Check(x))) {
//        if (sizeof(int) < sizeof(long)) {
//            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
//        } else {
//            long val = PyInt_AS_LONG(x);
//            if (is_unsigned && unlikely(val < 0)) {
//                goto raise_neg_overflow;
//            }
//            return (int) val;
//        }
//    } else
//#endif
//    if (likely(PyLong_Check(x))) {
//        if (is_unsigned) {
//#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
// #if CYTHON_USE_PYLONG_INTERNALS
//            switch (Py_SIZE(x)) {
//                case  0: return 0;
//                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
//            }
// #endif
//#endif
//            if (unlikely(Py_SIZE(x) < 0)) {
//                goto raise_neg_overflow;
//            }
//            if (sizeof(int) <= sizeof(unsigned long)) {
//                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
//            } else if (sizeof(int) <= sizeof(unsigned long long)) {
//                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
//            }
//        } else {
//#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
// #if CYTHON_USE_PYLONG_INTERNALS
//            switch (Py_SIZE(x)) {
//                case  0: return 0;
//                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
//                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
//            }
// #endif
//#endif
//            if (sizeof(int) <= sizeof(long)) {
//                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
//            } else if (sizeof(int) <= sizeof(long long)) {
//                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
//            }
//        }
//        {
//#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
//            PyErr_SetString(PyExc_RuntimeError,
//                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
//#else
//            int val;
//            PyObject *v = __Pyx_PyNumber_Int(x);
// #if PY_MAJOR_VERSION < 3
//            if (likely(v) && !PyLong_Check(v)) {
//                PyObject *tmp = v;
//                v = PyNumber_Long(tmp);
//                Py_DECREF(tmp);
//            }
// #endif
//            if (likely(v)) {
//                int one = 1; int is_little = (int)*(unsigned char *)&one;
//                unsigned char *bytes = (unsigned char *)&val;
//                int ret = _PyLong_AsByteArray((PyLongObject *)v,
//                                              bytes, sizeof(val),
//                                              is_little, !is_unsigned);
//                Py_DECREF(v);
//                if (likely(!ret))
//                    return val;
//            }
//#endif
//            return (int) -1;
//        }
//    } else {
//        int val;
//        PyObject *tmp = __Pyx_PyNumber_Int(x);
//        if (!tmp) return (int) -1;
//        val = __Pyx_PyInt_As_int(tmp);
//        Py_DECREF(tmp);
//        return val;
//    }
//raise_overflow:
//    PyErr_SetString(PyExc_OverflowError,
//        "value too large to convert to int");
//    return (int) -1;
//raise_neg_overflow:
//    PyErr_SetString(PyExc_OverflowError,
//        "can't convert negative value to int");
//    return (int) -1;
//}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

//static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
//    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
//}
//static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
//    Py_ssize_t ignore;
//    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
//}
//static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
//#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
//    if (
//#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
//            __Pyx_sys_getdefaultencoding_not_ascii &&
//#endif
//            PyUnicode_Check(o)) {
//#if PY_VERSION_HEX < 0x03030000
//        char* defenc_c;
//        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
//        if (!defenc) return NULL;
//        defenc_c = PyBytes_AS_STRING(defenc);
//#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
//        {
//            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
//            char* c;
//            for (c = defenc_c; c < end; c++) {
//                if ((unsigned char) (*c) >= 128) {
//                    PyUnicode_AsASCIIString(o);
//                    return NULL;
//                }
//            }
//        }
//#endif
//        *length = PyBytes_GET_SIZE(defenc);
//        return defenc_c;
//#else
//        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
//#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
//        if (PyUnicode_IS_ASCII(o)) {
//            *length = PyUnicode_GET_LENGTH(o);
//            return PyUnicode_AsUTF8(o);
//        } else {
//            PyUnicode_AsASCIIString(o);
//            return NULL;
//        }
//#else
//        return PyUnicode_AsUTF8AndSize(o, length);
//#endif
//#endif
//    } else
//#endif
//#if !CYTHON_COMPILING_IN_PYPY
//    if (PyByteArray_Check(o)) {
//        *length = PyByteArray_GET_SIZE(o);
//        return PyByteArray_AS_STRING(o);
//    } else
//#endif
//    {
//        char* result;
//        int r = PyBytes_AsStringAndSize(o, &result, length);
//        if (unlikely(r < 0)) {
//            return NULL;
//        } else {
//            return result;
//        }
//    }
//}
//static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
//   int is_true = x == Py_True;
//   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
//   else return PyObject_IsTrue(x);
//}
//static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
//  PyNumberMethods *m;
//  const char *name = NULL;
//  PyObject *res = NULL;
//#if PY_MAJOR_VERSION < 3
//  if (PyInt_Check(x) || PyLong_Check(x))
//#else
//  if (PyLong_Check(x))
//#endif
//    return Py_INCREF(x), x;
//  m = Py_TYPE(x)->tp_as_number;
//#if PY_MAJOR_VERSION < 3
//  if (m && m->nb_int) {
//    name = "int";
//    res = PyNumber_Int(x);
//  }
//  else if (m && m->nb_long) {
//    name = "long";
//    res = PyNumber_Long(x);
//  }
//#else
//  if (m && m->nb_int) {
//    name = "int";
//    res = PyNumber_Long(x);
//  }
//#endif
//  if (res) {
//#if PY_MAJOR_VERSION < 3
//    if (!PyInt_Check(res) && !PyLong_Check(res)) {
//#else
//    if (!PyLong_Check(res)) {
//#endif
//      PyErr_Format(PyExc_TypeError,
//                   "__%.4s__ returned non-%.4s (type %.200s)",
//                   name, name, Py_TYPE(res)->tp_name);
//      Py_DECREF(res);
//      return NULL;
//    }
//  }
//  else if (!PyErr_Occurred()) {
//    PyErr_SetString(PyExc_TypeError,
//                    "an integer is required");
//  }
//  return res;
//}
//static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
//  Py_ssize_t ival;
//  PyObject *x;
//#if PY_MAJOR_VERSION < 3
//  if (likely(PyInt_CheckExact(b)))
//      return PyInt_AS_LONG(b);
//#endif
//  if (likely(PyLong_CheckExact(b))) {
//    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
//     #if CYTHON_USE_PYLONG_INTERNALS
//       switch (Py_SIZE(b)) {
//       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
//       case  0: return 0;
//       case  1: return ((PyLongObject*)b)->ob_digit[0];
//       }
//     #endif
//    #endif
//    return PyLong_AsSsize_t(b);
//  }
//  x = PyNumber_Index(b);
//  if (!x) return -1;
//  ival = PyInt_AsSsize_t(x);
//  Py_DECREF(x);
//  return ival;
//}
//static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
//    return PyInt_FromSize_t(ival);
//}


#endif /* Py_PYTHON_H */
