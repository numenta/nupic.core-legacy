#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.3.0.{build}

branches:
  except:
    - gh-pages

skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# http://www.appveyor.com/docs/environment-variables
# http://www.appveyor.com/docs/installed-software

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\nupic-core
clone_depth: 50

# Can't have a shallow clone because the CMake process will be
# calling into git to write the current SHA into the binaries.
shallow_clone: false

environment:
  COMPILER_FAMILY: GCC
  AWS_ACCESS_KEY_ID:
    secure: /9U0mCHp3k1U8Y5CY/kDqwCKG2gqchG/T/UlVWo8SME=
  AWS_SECRET_ACCESS_KEY:
    secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
  PYPI_USERNAME: numenta
  PYPI_PASSWORD:
    secure: UgABryPYZg823OcD1XRosA==

  matrix:
    # Win64
    - PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "64"
      PYTHONHOME: "C:\\Python27-x64"
      external_static_subdir: "windows64-gcc"
      wheel_name_suffix: "win_amd64"

    # Win32
    - PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "32"
      PYTHONHOME: "C:\\Python27"
      external_static_subdir: "windows32-gcc"
      wheel_name_suffix: "win32"

#---------------------------------#
#       build configuration       #
#---------------------------------#

configuration: Release

install:
  - set NUPIC_DEPLOYMENT_BUILD=1

  - set REPO_DIR=c:\projects\nupic-core
  - set NUPIC_CORE_DIR=%REPO_DIR%\build\release
  - set EXTERNAL_WINDOWS_DIR=%REPO_DIR%\external\%external_static_subdir%
  # TODO ZZZ nothing seems to be using EXT_LIBS env var
  - set EXT_LIBS=%EXTERNAL_WINDOWS_DIR%\lib

  - set ARTIFACTS_DIR=%REPO_DIR%\build\artifacts
  - for /f %%i in ('type VERSION') do set BINDINGS_VERSION=%%i
  - echo Binding version = %BINDINGS_VERSION%

  - set PYTHONPATH=%PYTHONHOME%
  - set PATH=%PYTHONHOME%\Scripts;%PYTHONHOME%;%PATH%
  - echo %PATH%

  # Install Python 2.7.x, Pip, Wheel, and NumPy
  - cd %REPO_DIR%\ci\appveyor
  - ps: .\install_python_pip.ps1

  - ECHO "Installing MinGW toolchain for Python:"
  # Install the version of mingwpy toolchain that generates targets compatible
  # with the installed python (Win32 vs. Win64). The compiler tools are
  # installed into %PYTHONHOME%/Scripts/
  - cmd: "%PYTHONHOME%\\Scripts\\pip.exe install -i https://pypi.anaconda.org/carlkl/simple mingwpy"
  - cmd: "where g++"

  # Setup MinGW GCC as a valid distutils compiler
  - cp %EXTERNAL_WINDOWS_DIR%\bin\distutils.cfg %PYTHONHOME%\Lib\distutils\distutils.cfg

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "where python"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Check NumPy, etc. installed correctly
  - cmd: pip list

  - cd %REPO_DIR%
  - mkdir %REPO_DIR%\build\
  - mkdir %REPO_DIR%\build\release
  - mkdir %REPO_DIR%\build\scripts

  # Remove sh.exe from the paths (CMake doesn't like it)
  - set PATH=%PATH:C:\Program Files (x86)\Git\bin;=%
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - set PATH=%PATH:C:\MinGW\msys\1.0\bin;=%

  # Fake KJ-Async and Capnp-RPC libs, not needed in Lite mode
  # http://www.cmake.org/Wiki/CmakeMingw
  - cd %REPO_DIR%\build\scripts
  - cmake -G "MinGW Makefiles"
      -DCMAKE_INSTALL_PREFIX=%REPO_DIR%\build\release
      -DPY_EXTENSIONS_DIR=%REPO_DIR%\bindings\py\nupic\bindings
      %REPO_DIR%

build_script:
  - cd %REPO_DIR%\build\scripts

  - mingw32-make -f Makefile install | findstr /C:"Install" /I /V

  - cd %REPO_DIR%

  - python setup.py sdist bdist bdist_wheel
  - ps: copy .\bindings\py\dist\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl .
  - ps: copy .\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl .\nupic.bindings-$env:APPVEYOR_REPO_COMMIT-cp27-none-$env:wheel_name_suffix.whl

after_build:
  - mkdir %ARTIFACTS_DIR%

  # legacy binary tests
  - cd %REPO_DIR%\build\release\bin
  - cpp_region_test.exe
  - unit_tests.exe --gtest_output=xml:%ARTIFACTS_DIR%\unit_tests_report.xml

test: off

artifacts:
  # Non-recursive search in build folder for Wheels
  - path: '*.whl'

on_success:
  # Github tagged builds
  - cmd: echo "executing on_success"
  - ps: >-
      If ($env:APPVEYOR_REPO_TAG -eq "true" -or $env:APPVEYOR_REPO_TAG -eq "True") {
        Write-Host "Uploading bindings to PYPI"
        pip install httplib requests twine --upgrade
        twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD -r pypi $env:REPO_DIR\bindings\py\dist\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl
      }

#deploy:
#  # Iterative builds
#  - provider: S3
#    access_key_id: AKIAIGHYSEHV3WFKOWNQ
#    secret_access_key:
#      secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
#    bucket: "artifacts.numenta.org"
#    region: us-west-2
#    set_public: true
#    artifact: "nupic.bindings-$(APPVEYOR_REPO_COMMIT)-cp27-none-$env:wheel_name_suffix.whl"
#    folder: "numenta/nupic.core/releases/nupic.bindings"
#    on:
#      branch: master


# ZZZ Disable deployment while implementing and debugging win32 build
deploy: off