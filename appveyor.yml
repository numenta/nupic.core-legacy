#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.3.0.{build}

branches:
  except:
    - gh-pages

skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# http://www.appveyor.com/docs/environment-variables
# http://www.appveyor.com/docs/installed-software

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\nupic-core
clone_depth: 50

# Can't have a shallow clone because the CMake process will be
# calling into git to write the current SHA into the binaries.
shallow_clone: false

environment:
  COMPILER_FAMILY: GCC
  AWS_ACCESS_KEY_ID:
    secure: /9U0mCHp3k1U8Y5CY/kDqwCKG2gqchG/T/UlVWo8SME=
  AWS_SECRET_ACCESS_KEY:
    secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
  PYPI_USERNAME: numenta
  PYPI_PASSWORD:
    secure: UgABryPYZg823OcD1XRosA==

  matrix:
    # Win64-gcc
    - PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "64"
      PYTHONHOME: "C:\\Python27-x64"
      NC_CMAKE_GENERATOR: "MinGW Makefiles"
      mingwpy_archive_name: mingwpy_amd64_vc90.7z
      libpython_archive_name: libpython-cp27-none-win_amd64.7z
      external_static_subdir: "windows64-gcc"
      wheel_name_suffix: "win_amd64"

    # Win32-gcc
    - PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "32"
      PYTHONHOME: "C:\\Python27"
      NC_CMAKE_GENERATOR: "MinGW Makefiles"
      mingwpy_archive_name: mingwpy_win32_vc90.7z
      libpython_archive_name: libpython-cp27-none-win32.7z
      external_static_subdir: "windows32-gcc"
      wheel_name_suffix: "win32"

#    # Win64-Visual Studio
#    - PYTHON_VERSION: "2.7.9"
#      PYTHON_ARCH: "64"
#      PYTHONHOME: "C:\\Python27-x64"
#      NC_CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
#      external_static_subdir: "windows64"
#      wheel_name_suffix: "win_amd64"


matrix:
  allow_failures:
    # Checking if Visual Studio build is possible
    - NC_CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"


#---------------------------------#
#       build configuration       #
#---------------------------------#

# configuration values must be compatible with CMAKE_BUILD_TYPE: Debug or Release
configuration: Release

# To work around issue #913, we're getting mingwpy toolchain from bitbucket,
# which apparently imposes bandwidth limitations, so we need to cache those
# artifacts
#
# NOTE apparently, saving cache is disabled in Pull Request buids per
# http://help.appveyor.com/discussions/problems/4048-build-cache-not-restored
cache:
  - C:\%mingwpy_archive_name%
  - C:\%libpython_archive_name%


install:
  - set NUPIC_DEPLOYMENT_BUILD=1

  - set REPO_DIR=c:\projects\nupic-core
  - set NUPIC_CORE_DIR=%REPO_DIR%\build\release
  - set EXTERNAL_WINDOWS_DIR=%REPO_DIR%\external\%external_static_subdir%

  - set ARTIFACTS_DIR=%REPO_DIR%\build\artifacts
  - for /f %%i in ('type VERSION') do set BINDINGS_VERSION=%%i
  - echo Binding version = %BINDINGS_VERSION%

  - set PYTHONPATH=%PYTHONHOME%
  - set PATH=%PYTHONHOME%\Scripts;%PYTHONHOME%;%PATH%

  # Make unix-compatible patch.exe available to the build by copying it from
  # Git\usr\bin (that we remove from PATH) to another directory and adding it to
  # PATH; the reason we copy it is that logic below removes
  # C:\Program Files\Git\usr\bin from Path to avoid build issue resulting from
  # sh.exe being on the path.
  - mkdir "C:\Program Files\PatchFromGit"
  - ps: copy "C:\Program Files\Git\usr\bin\patch.exe" "C:\Program Files\PatchFromGit"
  - ps: copy "C:\Program Files\Git\usr\bin\msys*.dll" "C:\Program Files\PatchFromGit"
  - set PATH=C:\Program Files\PatchFromGit;%PATH%

  - echo %PATH%

  #
  # Install Python 2.7.x, Pip, Wheel, and NumPy
  #
  - cd %REPO_DIR%\ci\appveyor
  - ps: .\install_python_pip.ps1

  #
  # Install mingwpy toolchain
  #
  - ECHO "Installing MinGW toolchain for Python"
  # This would have been easier, but was resulting in issue #913
  #- cmd: "%PYTHONHOME%\\Scripts\\pip.exe install -i https://pypi.anaconda.org/carlkl/simple mingwpy

  # Reference: https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy-2015-04-readme.md

  # List contents of C:\ to help debug caching of the artifacts
  - DIR C:\

  - ps: $dwntool=New-Object System.Net.WebClient

  - ECHO "Installing MinGW-w64 for Python via archive %mingwpy_archive_name%:"
  - ps: if (-Not (Test-Path "C:\\$env:mingwpy_archive_name")) { $dwntool.DownloadFile("https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/$env:mingwpy_archive_name", "C:\\$env:mingwpy_archive_name") } else { Write-Host "Found" $env:mingwpy_archive_name "in cache." }
  - 7z x C:\%mingwpy_archive_name% -oC:\ > null

  - ECHO "Installing MinGW-w64 Python 2.7.x libs via archive %libpython_archive_name% into %PYTHONHOME%:"
  - ps: if (-Not (Test-Path "C:\\$env:libpython_archive_name")) { $dwntool.DownloadFile("https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/$env:libpython_archive_name", "C:\\$env:libpython_archive_name") } else { Write-Host "Found" $env:libpython_archive_name "in cache." }
  - 7z x C:\%libpython_archive_name% -o%PYTHONHOME%\ > null

  - set PATH=C:\mingwpy\bin;%PATH%

  - cmd: "where g++"

  # Setup MinGW GCC as a valid distutils compiler
  - cp %EXTERNAL_WINDOWS_DIR%\bin\distutils.cfg %PYTHONHOME%\Lib\distutils\distutils.cfg

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "where python"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # It's useful to know our cmake version
  - cmd: where cmake
  - cmd: cmake --version

  # Check NumPy, etc. installed correctly
  - cmd: pip list

  - cd %REPO_DIR%
  - mkdir %REPO_DIR%\build\
  - mkdir %REPO_DIR%\build\release
  - mkdir %REPO_DIR%\build\scripts

  # Remove sh.exe from the paths (CMake doesn't like it)
  - set PATH=%PATH:C:\Program Files (x86)\Git\bin;=%
  - set PATH=%PATH:C:\Program Files\Git\usr\bin;=%
  - set PATH=%PATH:C:\MinGW\msys\1.0\bin;=%


  # Verify that patch command is available
  - "where patch"

  # Fake KJ-Async and Capnp-RPC libs, not needed in Lite mode
  # http://www.cmake.org/Wiki/CmakeMingw
  - cd %REPO_DIR%\build\scripts
  - cmake -G "%NC_CMAKE_GENERATOR%"
      -DCMAKE_BUILD_TYPE=%configuration%
      -DCMAKE_INSTALL_PREFIX=%REPO_DIR%\build\release
      -DPY_EXTENSIONS_DIR=%REPO_DIR%\bindings\py\nupic\bindings
      %REPO_DIR%


build_script:
  - cd %REPO_DIR%\build\scripts

  # Run build, using portable, toolchain-agnostic mechanism to start it
  - cmake.exe --build "%REPO_DIR%\build\scripts" --target install --config %configuration%

  - cd %REPO_DIR%

  - python setup.py sdist bdist bdist_wheel

  # Copy final wheel to REPO_DIR, so that AppVeyor can see it as an artifact
  - ps: copy .\bindings\py\dist\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl .

  # Copy final wheel, to appropriately named wheel for use with NuPIC
  # iterative builds (via nupic\.nupic_modules long-SHA reference).
  # Ties in with this Pip regex;
  # https://github.com/pypa/pip/blob/develop/pip/wheel.py#L616
  - ps: copy .\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl .\nupic.bindings-$env:BINDINGS_VERSION.$env:APPVEYOR_REPO_COMMIT-cp27-none-$env:wheel_name_suffix.whl

after_build:
  - mkdir %ARTIFACTS_DIR%

  # legacy binary tests
  - cd %REPO_DIR%\build\release\bin
  - connections_performance_test.exe
  - cpp_region_test.exe
  - helloregion.exe
  - hello_sp_tp.exe
  - prototest.exe
  - unit_tests.exe --gtest_output=xml:%ARTIFACTS_DIR%\unit_tests_report.xml
  - cd %REPO_DIR%
  - python setup.py test

# Disable automatic tests
test: off

artifacts:
  # Non-recursive search in build folder for Wheels
  - path: '*.whl'

on_success:
  # Github tagged builds
  - cmd: echo "executing on_success"
  - ps: >-
      If ($env:APPVEYOR_REPO_TAG -eq "true" -or $env:APPVEYOR_REPO_TAG -eq "True") {
        Write-Host "Uploading bindings to PYPI"
        pip install httplib requests twine --upgrade
        twine upload -u $env:PYPI_USERNAME -p $env:PYPI_PASSWORD -r pypi $env:REPO_DIR\bindings\py\dist\nupic.bindings-$env:BINDINGS_VERSION-cp27-none-$env:wheel_name_suffix.whl
      }

deploy:
  # Iterative builds
  - provider: S3
    access_key_id: AKIAIGHYSEHV3WFKOWNQ
    secret_access_key:
      secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
    bucket: "artifacts.numenta.org"
    region: us-west-2
    set_public: true
    artifact: "nupic.bindings-$(BINDINGS_VERSION).$(APPVEYOR_REPO_COMMIT)-cp27-none-$(wheel_name_suffix).whl"
    folder: "numenta/nupic.core/releases/nupic.bindings"
    on:
      branch: master
