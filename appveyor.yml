#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 0.3.0.{build}

branches:
  only:
    - master
    - appveyor-build

  except:
    - gh-pages

skip_commits:
  # Add [av skip] to commit messages to skip AppVeyor building
  # Add [ci skip] to skip Travis and AppVeyor building
  message: /\[av skip\]/ 

#---------------------------------#
#    environment configuration    #
#---------------------------------#

# http://www.appveyor.com/docs/environment-variables
# http://www.appveyor.com/docs/installed-software

# Build VM template
#os: Windows Server 2012
# http://www.appveyor.com/blog/2015/06/23/new-oss-build-environment-and-xamarin-support

init:
  - git config --global core.autocrlf input

clone_folder: c:\projects\nupic-core
clone_depth: 50
# Can't have a shallow clone because the CMake process will be calling into
# git to write the current SHA into the binaries.
shallow_clone: false

environment:
  PYTHON_ARCH: "64"
  COMPILER_FAMILY: GCC
      
  matrix:
    - PYTHON_VERSION: "2.7.9"
      PYTHONPATH: "C:\\Python27-x64"
      DEPLOY_TO_NUGET: 0

    #- PYTHON_VERSION: "3.5.0rc2"
    #  PYTHONPATH: "C:\\Python35-x64"
    #  DEPLOY_TO_NUGET: 0

matrix:
  fast_finish: false
  allow_failures:
    - PYTHON_VERSION: "3.5.0rc2"
      
nuget:
  account_feed: true
  project_feed: true
  disable_publish_on_pr: true
  # disable publishing of .nupkg artifacts to
  # account/project feeds for pull request builds

#---------------------------------#
#       build configuration       #
#---------------------------------#

configuration: Release

cache:
  - mingwpy_amd64_vc90.7z
  - libpython-cp27-none-win_amd64.7z

install:
  - set NUPIC_DEPLOYMENT_BUILD=1

  - set REPO_DIR=c:\projects\nupic-core
  - set NUPIC_CORE_RELEASE=%REPO_DIR%\build\release
  - set EXT_LIBS=%REPO_DIR%\external\windows64-gcc\lib

  #- ECHO "Installed Windows SDKs:"
  #- ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Reference: https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy-2015-04-readme.md
  - ECHO "Installing MinGW-w64 for Python:"
  - ps: $dwntool=New-Object System.Net.WebClient
  - ps: $dwntool.DownloadFile("https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy_amd64_vc90.7z", "C:\\mingwpy_amd64_vc90.7z")
  - 7z x C:\\mingwpy_amd64_vc90.7z -oC:\ > null

  - ECHO "Installing MinGW-w64 Python 2.7.x libs:"
  - ps: $dwntool=New-Object System.Net.WebClient
  - ps: $dwntool.DownloadFile("https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/libpython-cp27-none-win_amd64.7z", "C:\\libpython-cp27-none-win_amd64.7z")
  - 7z x C:\\libpython-cp27-none-win_amd64.7z -oC:\Python27-x64\ > null

  - set CC=gcc
  - set CXX=g++
  - set PATH=C:\mingwpy\bin;%PATH%

  # Patch up LTO plugins (only needed for certain MinGW-w64 GCC toolchain)
  #- mkdir C:\mingw64\lib\bfd-plugins
  #- cp C:\mingw64\libexec\gcc\x86_64-w64-mingw32\4.9.3\liblto_plugin-0.dll C:\mingw64\lib\bfd-plugins\liblto_plugin-0.dll

  - cd %REPO_DIR%\ci\appveyor

  # Install Python 2.7.x or 3.5.0rc2
  - ps: >-
      if ($env:PYTHON_VERSION -Match "3.5.0rc2") {
        if (-Not (Test-Path "python-3.5.0rc2-amd64.exe")) {
          $url  = "https://www.python.org/ftp/python/3.5.0/python-3.5.0rc2-amd64.exe"

          Invoke-WebRequest -UserAgent wget -Uri $url -OutFile python-3.5.0rc2-amd64.exe

        }

        ECHO "Installing Python 3.5.0 RC2:"

        python-3.5.0rc2-amd64.exe /p /q CompileAll=1 PrependPath=0 Include_test=0 TargetDir=$env:PYTHONPATH

        ECHO "Installing NumPy 1.9.2:"

        pip install "numpy-1.9.2+mkl-cp35-none-win_amd64.whl"

      } else {
        ECHO "Installing Python 2.7.x:"

        .\install_python_pip.ps1

      }

  - set PYTHONPATH=%PYTHONPATH%
  - set PATH=%PYTHONPATH%;%PYTHONPATH%\Scripts;%PATH%

  # Setup MinGW-w64 GCC as a valid distutils compiler
  - cp %REPO_DIR%\external\windows64-gcc\bin\distutils.cfg %PYTHONPATH%\Lib\distutils\distutils.cfg

  - ECHO "PATH is now:"
  - echo %PATH%

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Check NumPy installed correctly
  - cmd: pip list

  #- ECHO "Filesystem root:"
  #- ps: "ls \"C:/\""

  - cd %REPO_DIR%
  - mkdir %REPO_DIR%\build\
  - mkdir %REPO_DIR%\build\release

  - mkdir %REPO_DIR%\build\scripts
  - cd %REPO_DIR%\build\scripts

  # Remove sh.exe from the paths
  - set PATH=%PATH:C:\Program Files (x86)\Git\bin;=%
  - set PATH=%PATH:C:\MinGW\msys\1.0\bin;=%

  # Fake KJ-Async and Capnp-RPC libs, not needed in Lite mode
  # http://www.cmake.org/Wiki/CmakeMingw
  - cmake -G "MinGW Makefiles" 
      -DCMAKE_BUILD_TYPE=Debug 
      -DCMAKE_INSTALL_PREFIX=%REPO_DIR%\build\release 
      -DPYTHON_LIBRARY=%PYTHONPATH%\libs\libpython27.dll.a 
      -DPYTHON_INCLUDE_DIR=%PYTHONPATH%\include 
      -DCAPNP_INCLUDE_DIRS=%REPO_DIR%\external\windows64\include 
      -DCAPNP_EXECUTABLE=%REPO_DIR%\external\windows64\bin\capnp.exe 
      -DCAPNPC_CXX_EXECUTABLE=%REPO_DIR%\external\windows64\bin\capnpc-c++.exe 
      -DCAPNPC_LIB=%EXT_LIBS%\libcapnp.a 
      -DLIB_KJ=%EXT_LIBS%\libkj.a 
      -DLIB_CAPNP=%EXT_LIBS%\libcapnp.a 
      -DLIB_CAPNPC=%EXT_LIBS%\libcapnp.a 
      -DCAPNP_LIB_KJ=%EXT_LIBS%\libkj.a 
      -DCAPNP_LIB_CAPNP=%EXT_LIBS%\libcapnp.a 
      -DCAPNP_LIB_KJ-ASYNC=%EXT_LIBS%\libkj.a 
      -DCAPNP_LIB_CAPNP-RPC=%EXT_LIBS%\libcapnp.a 
      -DLIB_STATIC_APR1_LOC=%EXT_LIBS%\libapr-1.a 
      -DLIB_STATIC_APRUTIL1_LOC=%EXT_LIBS%\libaprutil-1.a 
      -DLIB_STATIC_YAML_CPP_LOC=%EXT_LIBS%\libyaml-cpp.a 
      -DLIB_STATIC_YAML_LOC=%EXT_LIBS%\libyaml.a 
      -DLIB_STATIC_Z_LOC=%EXT_LIBS%\libz.a 
      %REPO_DIR%
  #   -DCMAKE_EXPORT_COMPILE_COMMAND=ON Only for 'Unix Makefiles' and 'Ninja' generators
  #   -DCMAKE_USER_MAKE_RULES_OVERRIDE="%REPO_DIR%\ci\appveyor\ClangOverrides.txt"
  #   -D_CMAKE_TOOLCHAIN_PREFIX=llvm-

build_script:
  - cd %REPO_DIR%\build\scripts

  #- mingw32-make -f Makefile
  #- mingw32-make -f Makefile tests_all
  - mingw32-make -f Makefile install | findstr /C:"Install" /I /V

  - cd %REPO_DIR%
  - python setup.py install --user --debug --compiler=mingw --nupic-core-dir=%NUPIC_CORE_RELEASE%

after_build:
  - cd %REPO_DIR%\build\Release
  - set PROJECT_BUILD_ARTIFACTS_DIR=%REPO_DIR%\build\artifacts

  - ps: >-
      if($env:DEPLOY_TO_NUGET -eq 1) {
        $root = $env:APPVEYOR_BUILD_FOLDER

        $versionStr = $env:APPVEYOR_BUILD_VERSION

        Write-Host $root

        Write-Host "Setting Package.nuspec version tag to $versionStr"

        $content = (Get-Content $root\ci\appveyor\Package.nuspec) 

        $content = $content -replace '\$version\$',$versionStr

        $content | Out-File $root\ci\appveyor\Package.nuspec

        copy $env:REPO_DIR\ci\appveyor\Package.nuspec .

        nuget pack -version $env:APPVEYOR_BUILD_VERSION

        nuget push *.nupkg 30618afb-ecf6-4476-8e61-a5b823ad9892
        # NOTE: Push to nuget is here, rather than normal AV deployment

      }

      # This packages via CMakeList CPack settings

      7z a -ttar -y -bd nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar . | findstr /b /c:"Everything is Ok" /c:"Scanning" /c:"Creating archive"

      7z a -tgzip -y -bd ..\..\nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar.gz nupic_core-$env:APPVEYOR_REPO_COMMIT-windows64.tar

artifacts:
  - path: '**\*.tar.gz' # find all Gz(ip) packages recursively

deploy:
  # Amazon S3 deployment provider settings
  - provider: S3
    access_key_id:
      secure: /9U0mCHp3k1U8Y5CY/kDqwCKG2gqchG/T/UlVWo8SME=
    secret_access_key:
      secure: /8wO17Gir0XAiecJkHeE3jxOJzvyl0+uWcl7BKCuN0FC795golsL8905VmNuRl1o
    bucket: "artifacts.numenta.org"
    region: us-west-2
    set_public: true
    artifact: "nupic_core-$(APPVEYOR_REPO_COMMIT)-windows64.tar.gz"
    folder: "numenta/nupic.core"
    on:
      branch: master

test: off
